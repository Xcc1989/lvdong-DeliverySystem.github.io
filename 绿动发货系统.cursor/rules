# 绿动发货系统项目规则

## 项目概述
绿动发货系统是一个面向物流发货管理的前端应用，提供订单管理、物流追踪、电子面单打印等功能。项目采用现代前端技术栈构建，注重用户体验和操作效率。

## 技术栈
- HTML5
- CSS3
- JavaScript (ES6+)
- Bootstrap 5
- SweetAlert2
- IndexedDB (本地存储)
- 快递100 API

## 文件结构规范
```
frontend/
├── assets/             # 静态资源文件夹
│   ├── images/         # 图片资源
│   └── templates/      # 运单模板
├── config/             # 配置文件
│   └── api-config.js   # API配置
├── pages/              # 页面文件
│   ├── README.md       # 页面文档
│   └── *.html          # 各功能页面
├── scripts/            # JavaScript脚本
│   └── *.js            # 各功能脚本
├── services/           # 服务层
│   ├── README.md       # 服务文档
│   ├── indexedDBService.js # 本地存储服务
│   ├── kuaidi100Service.js # 快递100服务
│   └── warehouseService.js # 仓储服务
├── styles/             # 样式文件
│   └── *.css           # 各功能样式
├── templates/          # 模板文件
│   └── *.xlsx          # Excel导入模板
└── README.md           # 项目说明文档
```

## 命名规范

### 文件命名
- HTML文件：使用小写字母，单词间用连字符（-）分隔，例如：`order-list.html`
- JavaScript文件：使用驼峰命名法，例如：`orderList.js`
- CSS文件：使用小写字母，单词间用连字符（-）分隔，例如：`order-list.css`
- 服务文件：使用驼峰命名法并以Service结尾，例如：`indexedDBService.js`

### 变量命名
- 使用驼峰命名法，例如：`orderList`，`shippingFee`
- 布尔值变量以"is"、"has"或"should"开头，例如：`isSigned`，`hasError`
- 常量使用全大写，单词间用下划线（_）分隔，例如：`API_CONFIG`，`BASE_URL`

### ID和类命名
- HTML元素ID：使用驼峰命名法，例如：`orderTableBody`，`searchBtn`
- CSS类名：使用小写字母，单词间用连字符（-）分隔，例如：`order-item`，`filter-section`

## 编码规范

### HTML规范
- 使用HTML5文档类型：`<!DOCTYPE html>`
- 使用UTF-8字符编码：`<meta charset="UTF-8">`
- 使用语义化标签，如`<header>`，`<footer>`，`<nav>`，`<article>`等
- 表单控件必须有关联的label标签
- 使用Bootstrap的响应式网格系统

### CSS规范
- 优先使用Bootstrap提供的类
- 自定义样式应该明确作用范围，避免污染全局
- 使用CSS变量管理颜色和字体等共用样式
- 媒体查询应考虑移动设备优先

### JavaScript规范
- 使用ES6+语法
- 使用`async/await`处理异步操作
- 避免全局变量污染
- 采用模块化组织代码
- 使用`try/catch`块处理可能的错误
- 事件处理程序采用委托模式
- 避免直接修改DOM，使用数据驱动视图更新

## API调用规范
- API调用应封装在服务层
- 使用Promise或async/await处理异步操作
- 请求参数必须进行验证
- 统一处理API响应和错误
- 敏感信息不应直接显示在前端代码中

## 错误处理规范
- 使用try/catch捕获可能的异常
- 为用户提供友好的错误提示
- 在控制台输出详细的错误信息，便于调试
- 对关键操作增加错误恢复机制

## 注释规范
- 函数应有简洁明了的注释，说明其作用、参数和返回值
- 复杂逻辑应有详细注释
- 使用TODO标记待完成的任务
- 代码块的结束处使用注释标明对应的开始，如 `} // end of function`

## 本地存储规范
- 所有本地存储操作都应通过IndexedDB服务进行
- 存储的数据应有明确的结构和版本控制
- 敏感信息应加密后再存储
- 定期清理过期数据

## 安全性考虑
- 输入数据必须进行验证和清理
- API密钥不应直接暴露在前端代码中
- 使用HTTPS进行通信
- 遵循最小权限原则

## 版本控制
- 使用语义化版本控制(SemVer)
- 每次更新应记录在CHANGELOG.md中

## 测试规范
- 每个关键功能应有对应的测试用例
- 测试应涵盖正常流程和边界情况
- 使用模拟数据进行测试
- 定期进行集成测试

## 性能优化
- 避免过多的DOM操作
- 使用事件委托减少事件监听器数量
- 懒加载非关键资源
- 优化大型数据表格的渲染

## 文档规范
- 每个模块应有对应的README.md文件
- 文档应包含功能描述、使用方法和注意事项
- API文档应明确参数和返回值
- 代码示例应简洁明了

## 多语言支持
- 文本内容应使用变量或配置文件存储，便于国际化
- 日期和货币格式应考虑本地化

## 辅助功能
- 遵循WCAG 2.1标准
- 表格应使用适当的ARIA标签
- 确保键盘可访问性
- 提供足够的颜色对比度

以上规则旨在保持项目的一致性和可维护性，所有团队成员都应遵循。 